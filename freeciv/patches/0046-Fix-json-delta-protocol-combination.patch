From bba67c9def097f80cc6ace148081b90fd926b678 Mon Sep 17 00:00:00 2001
From: Marko Lindqvist <cazfi74@gmail.com>
Date: Fri, 15 Jul 2022 03:29:57 +0300
Subject: [PATCH 46/46] Fix json + delta protocol combination

Reported by Louis Moureaux

Patch by christian montanari and myself

See hrm #745593

Signed-off-by: Marko Lindqvist <cazfi74@gmail.com>
---
 common/generate_packets.py      | 25 ++++----------
 common/networking/dataio_json.c | 60 ++++++++++++++++++++++++++++-----
 2 files changed, 59 insertions(+), 26 deletions(-)

diff --git a/common/generate_packets.py b/common/generate_packets.py
index f1d105af10..b8f8babe0c 100755
--- a/common/generate_packets.py
+++ b/common/generate_packets.py
@@ -773,20 +773,13 @@ e |= DIO_PUT({self.dataio_type}, &dout, &field_addr, real_packet->{self.name}[i]
   int i;
 
 #ifdef FREECIV_JSON_CONNECTION
-  int count = 0;
+  size_t c = 0;
 
-  for (i = 0; i < {self.sizes[0].real}; i++) {{
-    if (old->{self.name}[i] != real_packet->{self.name}[i]) {{
-      count++;
-    }}
-  }}
   /* Create the array. */
-  e |= DIO_PUT(farray, &dout, &field_addr, count + 1);
+  e |= DIO_PUT(farray, &dout, &field_addr, 0);
 
   /* Enter array. */
   field_addr.sub_location = plocation_elem_new(0);
-
-  count = 0;
 #endif /* FREECIV_JSON_CONNECTION */
 
   fc_assert({self.sizes[0].real} < 255);
@@ -794,13 +787,14 @@ e |= DIO_PUT({self.dataio_type}, &dout, &field_addr, real_packet->{self.name}[i]
   for (i = 0; i < {self.sizes[0].real}; i++) {{
     if (old->{self.name}[i] != real_packet->{self.name}[i]) {{
 #ifdef FREECIV_JSON_CONNECTION
-      /* Next diff array element. */
-      field_addr.sub_location->number = count - 1;
+      /* Append next diff array element. */
+      field_addr.sub_location->number = -1;
 
       /* Create the diff array element. */
       e |= DIO_PUT(farray, &dout, &field_addr, 2);
 
       /* Enter diff array element (start at the index address). */
+      field_addr.sub_location->number = c++;
       field_addr.sub_location->sub_location = plocation_elem_new(0);
 #endif /* FREECIV_JSON_CONNECTION */
       e |= DIO_PUT(uint8, &dout, &field_addr, i);
@@ -818,13 +812,8 @@ e |= DIO_PUT({self.dataio_type}, &dout, &field_addr, real_packet->{self.name}[i]
     }}
   }}
 #ifdef FREECIV_JSON_CONNECTION
-  field_addr.sub_location->number = count - 1;
-
-  /* Create the diff array element. */
-  e |= DIO_PUT(farray, &dout, &field_addr, {self.sizes[0].real});
-
-  /* Enter diff array element. Point to index address. */
-  field_addr.sub_location->sub_location = plocation_elem_new(0);
+  /* Append diff array element. */
+  field_addr.sub_location->number = -1;
 #endif /* FREECIV_JSON_CONNECTION */
   e |= DIO_PUT(uint8, &dout, &field_addr, 255);
 
diff --git a/common/networking/dataio_json.c b/common/networking/dataio_json.c
index d938158fc7..044f462acb 100644
--- a/common/networking/dataio_json.c
+++ b/common/networking/dataio_json.c
@@ -114,10 +114,28 @@ static int plocation_write_elem(json_t *item,
   int e = -1;
 
   if (location->sub_location == NULL) {
-    e = json_array_set_new(item, location->number, data);
+    if (location->number == -1) {
+      e = json_array_append_new(item, data);
+    } else {
+      e = json_array_set_new(item, location->number, data);
+    }
   } else {
-    e = plocation_write_data(json_array_get(item, location->number),
-                             location->sub_location, data);
+    // PTZ200718 handles last element get case...
+    // better here than all around put_array-diff algo ?
+    size_t n = (location->number == -1)
+      ? (json_array_size(item) - 1)
+      : location->number;
+
+    json_t *sub_item = json_array_get(item, n);
+
+    if (json_is_array(sub_item)) {
+      e = plocation_write_data(sub_item,
+                               location->sub_location, data);
+    } else {
+      log_error("ERROR:plocation_write_elem:array not found for sub location:"
+                "%s @[" SIZE_T_PRINTF "]",
+                json_dumps(item, JSON_DECODE_ANY), location->number);
+    }
   }
 
   return e;
@@ -171,12 +189,34 @@ static json_t *plocation_read_field(json_t *item,
 static json_t *plocation_read_elem(json_t *item,
                                    const struct plocation *location)
 {
-  if (location->sub_location == NULL) {
-    return json_array_get(item, location->number);
-  } else {
-    return plocation_read_data(json_array_get(item, location->number),
-                               location->sub_location);
+  // PTZ200719 sanity checks
+  if (!json_is_array(item)) {
+    log_error("ERROR:plocation_read_elem of non array :%s",
+              json_dumps(item, JSON_DECODE_ANY));
+    return item;
+  } else if (location->number >= json_array_size(item)) {
+    log_error("ERROR:plocation_read_elem: number="
+              SIZE_T_PRINTF " ge array_size=" SIZE_T_PRINTF,
+              location->number, json_array_size(item));
+  }
+
+  json_t *sub_item = json_array_get(item, location->number);
+
+  if (location->sub_location != NULL) {
+    if (json_is_array(sub_item)) {
+      // TODO::PTZ200717 not good... location->name loses its meaning here...
+      // as could be calling another plocation_read_field....
+      return plocation_read_data(sub_item, location->sub_location);
+    } else if (sub_item == NULL) {
+      // TODO::PTZ200717 this could be an error with too many sub_location ....
+      // occuring when mixed elements in the root array
+      log_packet("plocation_read_elem too many sub location of non array:"
+                 "%s @[" SIZE_T_PRINTF "]",
+                 json_dumps(item, JSON_DECODE_ANY), location->number);
+    }
   }
+
+  return sub_item;
 }
 
 /**********************************************************************//**
@@ -185,6 +225,10 @@ static json_t *plocation_read_elem(json_t *item,
 static json_t *plocation_read_data(json_t *item,
                                    const struct plocation *location)
 {
+  if (json_is_null(item)) { // PTZ200719 sanity checks stops the massacre
+    return item;
+  }
+
   switch (location->kind) {
   case PADR_FIELD:
     return plocation_read_field(item, location);
-- 
2.35.1

