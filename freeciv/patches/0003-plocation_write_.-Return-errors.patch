From b130eac6597824e0eb29192ae5cffd5be655c7e2 Mon Sep 17 00:00:00 2001
From: Marko Lindqvist <cazfi74@gmail.com>
Date: Mon, 4 Jul 2022 18:26:36 +0300
Subject: [PATCH 03/55] plocation_write_...(): Return errors

Change plocation_write_...() functions to return int indicating
the error. Use that information in json protocol dio_put_...()
functions to return correct error values from themselves.

Based on patch by christian montanari

See osdn #44986

Signed-off-by: Marko Lindqvist <cazfi74@gmail.com>
---
 common/networking/dataio_json.c | 297 +++++++++++++++++++-------------
 1 file changed, 177 insertions(+), 120 deletions(-)

diff --git a/common/networking/dataio_json.c b/common/networking/dataio_json.c
index bca801b325..d938158fc7 100644
--- a/common/networking/dataio_json.c
+++ b/common/networking/dataio_json.c
@@ -81,59 +81,71 @@ static CURL *get_curl(void)
   return curl_easy_handle;
 }
 
-static void plocation_write_data(json_t *item,
-                                 const struct plocation *location,
-                                 json_t *data);
+static int plocation_write_data(json_t *item,
+                                const struct plocation *location,
+                                json_t *data);
 
 /**********************************************************************//**
   Helper for plocation_write_data(). Use it in stead of this.
 **************************************************************************/
-static void plocation_write_field(json_t *item,
-                                  const struct plocation *location,
-                                  json_t *data)
+static int plocation_write_field(json_t *item,
+                                 const struct plocation *location,
+                                 json_t *data)
 {
+  int e = -1;
+
   if (location->sub_location == NULL) {
-    json_object_set_new(item, location->name, data);
+    e = json_object_set_new(item, location->name, data);
   } else {
-    plocation_write_data(json_object_get(item, location->name),
-                         location->sub_location, data);
+    e = plocation_write_data(json_object_get(item, location->name),
+                             location->sub_location, data);
   }
+
+  return e;
 }
 
 /**********************************************************************//**
   Helper for plocation_write_data(). Use it in stead of this.
 **************************************************************************/
-static void plocation_write_elem(json_t *item,
-                                 const struct plocation *location,
-                                 json_t *data)
+static int plocation_write_elem(json_t *item,
+                                const struct plocation *location,
+                                json_t *data)
 {
+  int e = -1;
+
   if (location->sub_location == NULL) {
-    json_array_set_new(item, location->number, data);
+    e = json_array_set_new(item, location->number, data);
   } else {
-    plocation_write_data(json_array_get(item, location->number),
-                         location->sub_location, data);
+    e = plocation_write_data(json_array_get(item, location->number),
+                             location->sub_location, data);
   }
+
+  return e;
 }
 
 /**********************************************************************//**
   Write the specified JSON data to the given location in the provided
   JSON item.
 **************************************************************************/
-static void plocation_write_data(json_t *item,
-                                 const struct plocation *location,
-                                 json_t *data)
+static int plocation_write_data(json_t *item,
+                                const struct plocation *location,
+                                json_t *data)
 {
+  int e = -1;
+
   switch (location->kind) {
   case PADR_FIELD:
-    plocation_write_field(item, location, data);
-    return;
+    e = plocation_write_field(item, location, data);
+    break;
   case PADR_ELEMENT:
-    plocation_write_elem(item, location, data);
-    return;
+    e = plocation_write_elem(item, location, data);
+    break;
   default:
     log_error("Unknown packet part location kind.");
-    return;
+    break;
   }
+
+  return e;
 }
 
 static json_t *plocation_read_data(json_t *item,
@@ -191,13 +203,15 @@ int dio_put_uint8_json(struct json_data_out *dout,
                        const struct plocation *location,
                        int value)
 {
+  int e;
+
   if (dout->json) {
-    plocation_write_data(dout->json, location, json_integer(value));
+    e = plocation_write_data(dout->json, location, json_integer(value));
   } else {
-    dio_put_uint8_raw(&dout->raw, value);
+    e = dio_put_uint8_raw(&dout->raw, value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -207,13 +221,15 @@ int dio_put_sint8_json(struct json_data_out *dout,
                        const struct plocation *location,
                        int value)
 {
+  int e;
+
   if (dout->json) {
-    plocation_write_data(dout->json, location, json_integer(value));
+    e = plocation_write_data(dout->json, location, json_integer(value));
   } else {
-    dio_put_sint8_raw(&dout->raw, value);
+    e = dio_put_sint8_raw(&dout->raw, value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -222,13 +238,15 @@ int dio_put_sint8_json(struct json_data_out *dout,
 int dio_put_uint16_json(struct json_data_out *dout,
                         const struct plocation *location, int value)
 {
+  int e;
+
   if (dout->json) {
-    plocation_write_data(dout->json, location, json_integer(value));
+    e = plocation_write_data(dout->json, location, json_integer(value));
   } else {
-    dio_put_uint16_raw(&dout->raw, value);
+    e = dio_put_uint16_raw(&dout->raw, value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -237,13 +255,15 @@ int dio_put_uint16_json(struct json_data_out *dout,
 int dio_put_sint16_json(struct json_data_out *dout,
                         const struct plocation *location, int value)
 {
+  int e;
+
   if (dout->json) {
-    plocation_write_data(dout->json, location, json_integer(value));
+    e = plocation_write_data(dout->json, location, json_integer(value));
   } else {
-    dio_put_sint16_raw(&dout->raw, value);
+    e = dio_put_sint16_raw(&dout->raw, value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -253,6 +273,8 @@ int dio_put_cm_parameter_json(struct json_data_out *dout,
                               struct plocation *location,
                               const struct cm_parameter *param)
 {
+  int e = 0;
+
   if (dout->json) {
     json_t *obj = json_object();
     json_t *min_surplus = json_array();
@@ -260,29 +282,29 @@ int dio_put_cm_parameter_json(struct json_data_out *dout,
     int i;
 
     for (i = 0; i < O_LAST; i++) {
-      json_array_append_new(min_surplus,
-                            json_integer(param->minimal_surplus[i]));
-      json_array_append_new(factor,
-                            json_integer(param->factor[i]));
+      e |= json_array_append_new(min_surplus,
+                                 json_integer(param->minimal_surplus[i]));
+      e |= json_array_append_new(factor,
+                                 json_integer(param->factor[i]));
     }
 
-    json_object_set_new(obj, "minimal_surplus", min_surplus);
-    json_object_set_new(obj, "factor", factor);
-    json_object_set_new(obj, "max_growth", json_boolean(param->max_growth));
-    json_object_set_new(obj, "require_happy",
-                        json_boolean(param->require_happy));
-    json_object_set_new(obj, "allow_disorder",
-                        json_boolean(param->allow_disorder));
-    json_object_set_new(obj, "allow_specialists",
-                        json_boolean(param->allow_specialists));
-    json_object_set_new(obj, "happy_factor",
-                        json_integer(param->happy_factor));
-    plocation_write_data(dout->json, location, obj);
+    e |= json_object_set_new(obj, "minimal_surplus", min_surplus);
+    e |= json_object_set_new(obj, "factor", factor);
+    e |= json_object_set_new(obj, "max_growth", json_boolean(param->max_growth));
+    e |= json_object_set_new(obj, "require_happy",
+                             json_boolean(param->require_happy));
+    e |= json_object_set_new(obj, "allow_disorder",
+                             json_boolean(param->allow_disorder));
+    e |= json_object_set_new(obj, "allow_specialists",
+                             json_boolean(param->allow_specialists));
+    e |= json_object_set_new(obj, "happy_factor",
+                             json_integer(param->happy_factor));
+    e |= plocation_write_data(dout->json, location, obj);
   } else {
-    dio_put_cm_parameter_raw(&dout->raw, param);
+    e = dio_put_cm_parameter_raw(&dout->raw, param);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -292,25 +314,28 @@ int dio_put_unit_order_json(struct json_data_out *dout,
                             struct plocation *location,
                             const struct unit_order *order)
 {
+  int e = 0;
+
   if (dout->json) {
     json_t *obj = json_object();
-    json_object_set_new(obj, "order", json_integer(order->order));
-    json_object_set_new(obj, "activity", json_integer(order->activity));
-    json_object_set_new(obj, "target", json_integer(order->target));
-    json_object_set_new(obj, "sub_target", json_integer(order->sub_target));
-    json_object_set_new(obj, "action", json_integer(order->action));
+
+    e |= json_object_set_new(obj, "order", json_integer(order->order));
+    e |= json_object_set_new(obj, "activity", json_integer(order->activity));
+    e |= json_object_set_new(obj, "target", json_integer(order->target));
+    e |= json_object_set_new(obj, "sub_target", json_integer(order->sub_target));
+    e |= json_object_set_new(obj, "action", json_integer(order->action));
     if (order->dir == -1) {
       /* Avoid integer underflow */
-      json_object_set_new(obj, "dir", json_integer(-1));
+      e |= json_object_set_new(obj, "dir", json_integer(-1));
     } else {
-      json_object_set_new(obj, "dir", json_integer(order->dir));
+      e |= json_object_set_new(obj, "dir", json_integer(order->dir));
     }
-    plocation_write_data(dout->json, location, obj);
+    e |= plocation_write_data(dout->json, location, obj);
   } else {
-    dio_put_unit_order_raw(&dout->raw, order);
+    e = dio_put_unit_order_raw(&dout->raw, order);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -320,12 +345,14 @@ int dio_put_worklist_json(struct json_data_out *dout,
                           struct plocation *location,
                           const struct worklist *pwl)
 {
+  int e = 0;
+
   if (dout->json) {
     int i;
     const int size = worklist_length(pwl);
 
     /* Must create the array before insertion. */
-    dio_put_farray_json(dout, location, size);
+    e |= dio_put_farray_json(dout, location, size);
 
     location->sub_location = plocation_elem_new(0);
 
@@ -335,19 +362,19 @@ int dio_put_worklist_json(struct json_data_out *dout,
 
       location->sub_location->number = i;
 
-      json_object_set_new(universal, "kind", json_integer(pcp->kind));
-      json_object_set_new(universal, "value",
-                          json_integer(universal_number(pcp)));
+      e |= json_object_set_new(universal, "kind", json_integer(pcp->kind));
+      e |= json_object_set_new(universal, "value",
+                               json_integer(universal_number(pcp)));
 
-      plocation_write_data(dout->json, location, universal);
+      e |= plocation_write_data(dout->json, location, universal);
     }
 
     FC_FREE(location->sub_location);
   } else {
-    dio_put_worklist_raw(&dout->raw, pwl);
+    e = dio_put_worklist_raw(&dout->raw, pwl);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -844,6 +871,8 @@ bool dio_get_action_probability_json(struct connection *pc, struct data_in *din,
 int dio_put_farray_json(struct json_data_out *dout,
                         const struct plocation *location, int size)
 {
+  int e = 0;
+
   if (dout->json) {
     int i;
     json_t *farray = json_array();
@@ -851,15 +880,15 @@ int dio_put_farray_json(struct json_data_out *dout,
     /* Jansson's json_array_set_new() refuses to create array elements so
      * they must be created with the array. */
     for (i = 0; i < size; i++) {
-      json_array_append_new(farray, json_null());
+      e |= json_array_append_new(farray, json_null());
     }
 
-    plocation_write_data(dout->json, location, farray);
+    e |= plocation_write_data(dout->json, location, farray);
   } else {
     /* No caller needs this */
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -868,13 +897,15 @@ int dio_put_farray_json(struct json_data_out *dout,
 int dio_put_uint32_json(struct json_data_out *dout,
                         const struct plocation *location, int value)
 {
+  int e;
+
   if (dout->json) {
-    plocation_write_data(dout->json, location, json_integer(value));
+    e = plocation_write_data(dout->json, location, json_integer(value));
   } else {
-    dio_put_uint32_raw(&dout->raw, value);
+    e = dio_put_uint32_raw(&dout->raw, value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -883,13 +914,15 @@ int dio_put_uint32_json(struct json_data_out *dout,
 int dio_put_sint32_json(struct json_data_out *dout,
                         const struct plocation *location, int value)
 {
+  int e;
+
   if (dout->json) {
-    plocation_write_data(dout->json, location, json_integer(value));
+    e = plocation_write_data(dout->json, location, json_integer(value));
   } else {
-    dio_put_sint32_raw(&dout->raw, value);
+    e = dio_put_sint32_raw(&dout->raw, value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -898,13 +931,15 @@ int dio_put_sint32_json(struct json_data_out *dout,
 int dio_put_bool8_json(struct json_data_out *dout,
                        const struct plocation *location, bool value)
 {
+  int e;
+
   if (dout->json) {
-    plocation_write_data(dout->json, location, value ? json_true() : json_false());
+    e = plocation_write_data(dout->json, location, value ? json_true() : json_false());
   } else {
-    dio_put_bool8_raw(&dout->raw, value);
+    e = dio_put_bool8_raw(&dout->raw, value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -913,13 +948,15 @@ int dio_put_bool8_json(struct json_data_out *dout,
 int dio_put_bool32_json(struct json_data_out *dout,
                         const struct plocation *location, bool value)
 {
+  int e;
+
   if (dout->json) {
-    plocation_write_data(dout->json, location, value ? json_true() : json_false());
+    e = plocation_write_data(dout->json, location, value ? json_true() : json_false());
   } else {
-    dio_put_bool32_raw(&dout->raw, value);
+    e = dio_put_bool32_raw(&dout->raw, value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -929,13 +966,15 @@ int dio_put_ufloat_json(struct json_data_out *dout,
                         const struct plocation *location,
                         float value, int float_factor)
 {
+  int e;
+
   if (dout->json) {
-    plocation_write_data(dout->json, location, json_real(value));
+    e = plocation_write_data(dout->json, location, json_real(value));
   } else {
-    dio_put_ufloat_raw(&dout->raw, value, float_factor);
+    e = dio_put_ufloat_raw(&dout->raw, value, float_factor);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -945,13 +984,15 @@ int dio_put_sfloat_json(struct json_data_out *dout,
                         const struct plocation *location,
                         float value, int float_factor)
 {
+  int e;
+
   if (dout->json) {
-    plocation_write_data(dout->json, location, json_real(value));
+    e = plocation_write_data(dout->json, location, json_real(value));
   } else {
-    dio_put_sfloat_raw(&dout->raw, value, float_factor);
+    e = dio_put_sfloat_raw(&dout->raw, value, float_factor);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -961,14 +1002,17 @@ int dio_put_uint8_vec8_json(struct json_data_out *dout,
                             const struct plocation *location,
                             int *values, int stop_value)
 {
+  int e;
+
   if (dout->json) {
     /* TODO: implement. */
     log_error("Tried to send unimplemeted data type uint8_vec8.");
+    e = -1;
   } else {
-    dio_put_uint8_vec8_raw(&dout->raw, values, stop_value);
+    e = dio_put_uint8_vec8_raw(&dout->raw, values, stop_value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -978,14 +1022,17 @@ int dio_put_uint16_vec8_json(struct json_data_out *dout,
                              const struct plocation *location, int *values,
                              int stop_value)
 {
+  int e;
+
   if (dout->json) {
     /* TODO: implement. */
     log_error("Tried to send unimplemeted data type uint16_vec8.");
+    e = -1;
   } else {
-    dio_put_uint16_vec8_raw(&dout->raw, values, stop_value);
+    e = dio_put_uint16_vec8_raw(&dout->raw, values, stop_value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -996,26 +1043,28 @@ int dio_put_memory_json(struct json_data_out *dout,
                         const void *value,
                         size_t size)
 {
+  int e;
+
   if (dout->json) {
     int i;
 
-    dio_put_farray_json(dout, location, size);
+    e = dio_put_farray_json(dout, location, size);
 
     location->sub_location = plocation_elem_new(0);
 
     for (i = 0; i < size; i++) {
       location->sub_location->number = i;
 
-      dio_put_uint8_json(dout, location,
-                         ((unsigned char *)value)[i]);
+      e |= dio_put_uint8_json(dout, location,
+                              ((unsigned char *)value)[i]);
     }
 
     FC_FREE(location->sub_location);
   } else {
-    dio_put_memory_raw(&dout->raw, value, size);
+    e = dio_put_memory_raw(&dout->raw, value, size);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -1025,13 +1074,15 @@ int dio_put_string_json(struct json_data_out *dout,
                         const struct plocation *location,
                         const char *value)
 {
+  int e;
+
   if (dout->json) {
-    plocation_write_data(dout->json, location, json_string(value));
+    e = plocation_write_data(dout->json, location, json_string(value));
   } else {
-    dio_put_string_raw(&dout->raw, value);
+    e = dio_put_string_raw(&dout->raw, value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -1041,6 +1092,8 @@ int dio_put_estring_json(struct json_data_out *dout,
                          const struct plocation *location,
                          const char *value)
 {
+  int e;
+
   if (dout->json) {
     char *escaped_value;
 
@@ -1048,15 +1101,15 @@ int dio_put_estring_json(struct json_data_out *dout,
     escaped_value = curl_easy_escape(get_curl(), value, 0);
 
     /* Handle as a regular string from now on. */
-    dio_put_string_json(dout, location, escaped_value);
+    e = dio_put_string_json(dout, location, escaped_value);
 
     /* CURL's memory management wants to free this it self. */
     curl_free(escaped_value);
   } else {
-    dio_put_estring_raw(&dout->raw, value);
+    e = dio_put_estring_raw(&dout->raw, value);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -1066,6 +1119,8 @@ int dio_put_requirement_json(struct json_data_out *dout,
                              const struct plocation *location,
                              const struct requirement *preq)
 {
+  int e = 0;
+
   if (dout->json) {
     int kind, range, value;
     bool survives, present, quiet;
@@ -1078,22 +1133,22 @@ int dio_put_requirement_json(struct json_data_out *dout,
 
     /* Write the requirement values to the fields of the requirement
      * object. */
-    json_object_set_new(requirement, "kind", json_integer(kind));
-    json_object_set_new(requirement, "value", json_integer(value));
+    e |= json_object_set_new(requirement, "kind", json_integer(kind));
+    e |= json_object_set_new(requirement, "value", json_integer(value));
 
-    json_object_set_new(requirement, "range", json_integer(range));
+    e |= json_object_set_new(requirement, "range", json_integer(range));
 
-    json_object_set_new(requirement, "survives", json_boolean(survives));
-    json_object_set_new(requirement, "present", json_boolean(present));
-    json_object_set_new(requirement, "quiet", json_boolean(quiet));
+    e |= json_object_set_new(requirement, "survives", json_boolean(survives));
+    e |= json_object_set_new(requirement, "present", json_boolean(present));
+    e |= json_object_set_new(requirement, "quiet", json_boolean(quiet));
 
     /* Put the requirement object in the packet. */
-    plocation_write_data(dout->json, location, requirement);
+    e |= plocation_write_data(dout->json, location, requirement);
   } else {
-    dio_put_requirement_raw(&dout->raw, preq);
+    e = dio_put_requirement_raw(&dout->raw, preq);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
@@ -1103,22 +1158,24 @@ int dio_put_action_probability_json(struct json_data_out *dout,
                                     const struct plocation *location,
                                     const struct act_prob *prob)
 {
+  int e = 0;
+
   if (dout->json) {
     /* Create the action probability object. */
     json_t *action_probability = json_object();
 
     /* Write the action probability values to the fields of the action
      * probability object. */
-    json_object_set_new(action_probability, "min", json_integer(prob->min));
-    json_object_set_new(action_probability, "max", json_integer(prob->max));
+    e |= json_object_set_new(action_probability, "min", json_integer(prob->min));
+    e |= json_object_set_new(action_probability, "max", json_integer(prob->max));
 
     /* Put the action probability object in the packet. */
-    plocation_write_data(dout->json, location, action_probability);
+    e |= plocation_write_data(dout->json, location, action_probability);
   } else {
-    dio_put_action_probability_raw(&dout->raw, prob);
+    e = dio_put_action_probability_raw(&dout->raw, prob);
   }
 
-  return 0;
+  return e;
 }
 
 /**********************************************************************//**
-- 
2.35.1

